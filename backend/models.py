"""Database models for the HashiMom application.

We keep all SQLAlchemy models in a dedicated module to maintain a clean
architecture. Each table corresponds to a core feature in the MVP:

* User – stores a nickname for a simple session stub.  
* Lab – captures lab tests and results per user.  
* Symptom – records daily symptoms and severity.  
* Medication – logs medication name, dose and timing.  
* GlutenScan – stores the outcome of an image scan for gluten content.  
* AIMessage – persists encouraging messages generated by AI.

All datetime fields use naive UTC timestamps via `datetime.utcnow()`.  
This avoids storing personally identifiable information (PHI) and keeps
the data model straightforward.
"""

from __future__ import annotations

from datetime import datetime, date
from typing import Optional

from flask_sqlalchemy import SQLAlchemy


db = SQLAlchemy()


class User(db.Model):
    """Simple user model using a nickname.

    A unique nickname is enforced to avoid duplicate pseudo‑users.  
    The `id` field is used for relationships to other tables.
    """

    __tablename__ = "users"

    id = db.Column(db.Integer, primary_key=True)
    nickname = db.Column(db.String(64), unique=True, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    labs = db.relationship("Lab", backref="user", lazy=True, cascade="all, delete-orphan")
    symptoms = db.relationship("Symptom", backref="user", lazy=True, cascade="all, delete-orphan")
    medications = db.relationship("Medication", backref="user", lazy=True, cascade="all, delete-orphan")
    gluten_scans = db.relationship("GlutenScan", backref="user", lazy=True, cascade="all, delete-orphan")
    ai_messages = db.relationship("AIMessage", backref="user", lazy=True, cascade="all, delete-orphan")
    profile = db.relationship("Profile", backref="user", uselist=False, cascade="all, delete-orphan")

    def __repr__(self) -> str:
        return f"<User {self.nickname}>"


class Lab(db.Model):
    """Represents a single lab test result for a user."""

    __tablename__ = "labs"

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    test_name = db.Column(db.String(128), nullable=False)
    result = db.Column(db.String(64), nullable=False)
    units = db.Column(db.String(32), nullable=True)
    test_date = db.Column(db.Date, nullable=False)

    def to_dict(self) -> dict:
        return {
            "id": self.id,
            "test_name": self.test_name,
            "result": self.result,
            "units": self.units,
            "test_date": self.test_date.isoformat(),
        }


class Profile(db.Model):
    """Pregnancy profile for a user (1:1).

    Stores last menstrual period (LMP), estimated due date (EDD), and optional
    high‑risk notes. Only one profile per user is allowed.
    """

    __tablename__ = "profiles"

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False, unique=True)
    lmp_date = db.Column(db.Date, nullable=True)
    due_date = db.Column(db.Date, nullable=True)
    high_risk_notes = db.Column(db.Text, nullable=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    def to_dict(self) -> dict:
        return {
            "id": self.id,
            "user_id": self.user_id,
            "lmp_date": self.lmp_date.isoformat() if self.lmp_date else None,
            "due_date": self.due_date.isoformat() if self.due_date else None,
            "high_risk_notes": self.high_risk_notes or "",
            "created_at": self.created_at.isoformat() if self.created_at else None,
            "updated_at": self.updated_at.isoformat() if self.updated_at else None,
        }


class ReferenceRange(db.Model):
    """Trimester‑specific reference ranges for analytes.

    Unique on (analyte, trimester).
    """

    __tablename__ = "reference_ranges"

    id = db.Column(db.Integer, primary_key=True)
    analyte = db.Column(db.String(64), nullable=False)
    trimester = db.Column(db.String(2), nullable=False)  # T1 | T2 | T3
    low = db.Column(db.Float, nullable=False)
    high = db.Column(db.Float, nullable=False)
    unit = db.Column(db.String(32), nullable=False)

    __table_args__ = (
        db.UniqueConstraint("analyte", "trimester", name="uq_reference_ranges_analyte_trimester"),
    )

    def to_dict(self) -> dict:
        return {
            "id": self.id,
            "analyte": self.analyte,
            "trimester": self.trimester,
            "low": self.low,
            "high": self.high,
            "unit": self.unit,
        }


class Symptom(db.Model):
    """Stores a symptom entry with severity and optional notes."""

    __tablename__ = "symptoms"

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    symptom = db.Column(db.String(128), nullable=False)
    severity = db.Column(db.Integer, nullable=False, default=0)
    note = db.Column(db.Text, nullable=True)
    logged_at = db.Column(db.DateTime, default=datetime.utcnow)

    def to_dict(self) -> dict:
        return {
            "id": self.id,
            "symptom": self.symptom,
            "severity": self.severity,
            "note": self.note,
            "logged_at": self.logged_at.isoformat(),
        }


class Medication(db.Model):
    """Medication log entry for a user."""

    __tablename__ = "medications"

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    medication_name = db.Column(db.String(128), nullable=False)
    dose = db.Column(db.String(64), nullable=True)
    time_of_day = db.Column(db.String(32), nullable=True)
    taken_at = db.Column(db.DateTime, nullable=False)

    def to_dict(self) -> dict:
        return {
            "id": self.id,
            "medication_name": self.medication_name,
            "dose": self.dose,
            "time_of_day": self.time_of_day,
            "taken_at": self.taken_at.isoformat(),
        }


class GlutenScan(db.Model):
    """Represents the result of a Gluten Snap image scan."""

    __tablename__ = "gluten_scans"

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    image_url = db.Column(db.String(256), nullable=False)
    result_tag = db.Column(db.String(32), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def to_dict(self) -> dict:
        return {
            "id": self.id,
            "image_url": self.image_url,
            "result_tag": self.result_tag,
            "created_at": self.created_at.isoformat(),
        }


class AIMessage(db.Model):
    """Stores AI‑generated encouragement messages."""

    __tablename__ = "ai_messages"

    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey("users.id"), nullable=False)
    message = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)

    def to_dict(self) -> dict:
        return {
            "id": self.id,
            "message": self.message,
            "created_at": self.created_at.isoformat(),
        }